---
title: "Maps (trucos)"
subtitle: | 
  Recopilación de truquillos sobre GIS
date: 2023-07-11
#draft: true
categories: [maps, GIS]
---



Este post sirve para apuntar trucos sobre {GIS}



## Datos

- Mundo

```{r}
#| eval: false
world <- ggplot2::map_data("world")
```

- Eurostat

```{r}
#| eval: false
library(eurostat)
greece <- eurostat_geodata_60_2016 %>% 
    filter(LEVL_CODE == 3, stringr::str_sub(geo, 1, 2) == "EL")

#- https://twitter.com/geokaramanis/status/1611052804109635584
nuts2 <- eurostat_geodata_60_2016 %>% janitor::clean_names() %>% 
  filter(levl_code == 2)

# Get world coastline, to be used as "background"
world_coast <- sf::read_sf("https://gisco-services.ec.europa.eu/distribution/v2/coas/geojson/COAS_RG_10M_2016_3035.geojson")

#- para el zoom (incluye Canarias y Turquía)
coord_sf(xlim = c(-22.5, 44), ylim = c(30, 70.5)) +
```


<br>


## Trucos

### Ilya Katalinsky


Dice que mejora mucho las coropleta si quitamos los bordes exteriores de las geometrías: <https://ikashnitsky.github.io/2023/map-borders/index.html>. Geometrías de Eurostat (NUTS-3)


```{r}
#| eval: false
#- esto crea un objeto con las innerlines de unas geometrias

library(rmapshaper)
bord <- greece %>% ms_innerlines()
```



```{r}
#| eval: false
library(tidyverse)
library(sf)
library(cowplot)

set.seed(911)

# subset Greence, NUTS-3 regions
library(eurostat)
greece <- eurostat_geodata_60_2016 %>% 
    filter(LEVL_CODE == 3,
           str_sub(geo, 1, 2) == "EL") %>% 
    # create random values for filling the polygons
    mutate(random = runif(length(id))) %>% 
    select(id, geometry, random) %>% 
    st_transform(crs = 3035)

# plot with polygon outlines
greece %>% 
    ggplot()+
    geom_sf(aes(fill = random), color = 2, size = 1)+
    labs(title = "Polygons outlined")+
    scale_fill_viridis_c(begin = .5)+
    theme_map()+
    theme(plot.background = element_rect(color = NA, fill = "#eeffff"))

gg_outline <- last_plot()

#- AQUI: el truco es crear las innerlines y meterlo en otro geom
# produce border lines with rmapshaper::ms_innerlines()
library(rmapshaper)
bord <- greece %>% ms_innerlines()

# now plot without polygon outlines and with borders as lines
greece %>% 
    ggplot()+
    geom_sf(aes(fill = random), color = NA) +
    geom_sf(data = bord, color = 2, size = 1) +
    labs(title = "Borders as lines") +
    scale_fill_viridis_c(begin = .5) +
    theme_map()+
    theme(plot.background = element_rect(color = NA, fill = "#eeffff"))

# put side by side
library(patchwork)
(
    gg_outline + gg_bord 
)  + 
    plot_layout(guides = "collect")+
    plot_annotation(
        caption = "! Look at the islands", 
        theme = theme(plot.background = element_rect(color = NA, fill = "#eeffff"))
    )
gg_bord <- last_plot()

```

<br>

## Ejemplos

Nuevo proyecto/concurso (**MapPromptMonday**): <https://github.com/MapPromptMonday/MapPromptMonday>
### Chulisima coropleta

<https://twitter.com/nrennie35/status/1610198066547814401>


```{r}
#| eval: false
library(tidyverse)
library(showtext)
library(MetBrewer)

# load fonts
font_add_google("Roboto Slab", "slab")
font_add_google("Roboto", "roboto")
showtext_auto()

# load data (no chuta)
pop <- readr::read_csv("2023/2023-01-03/data/population_aged_70plus_years_both_sexes_percent.csv")
doctors <- readr::read_csv("2023/2023-01-03/data/medical_doctors_per_1000_people.csv")

# data wrangling
pop <- pop |> 
  pivot_longer(-country, values_to = "pop", names_to = "year")
doctors <- doctors |> 
  pivot_longer(-country, values_to = "doctors", names_to = "year")
plot_data <- pop |> 
  full_join(doctors, by = c("country", "year")) |> 
  mutate(ratio = doctors/pop) |> 
  drop_na() |> 
  group_by(country) |> 
  slice_max(year)

# world map
world <- map_data("world")
sort(unique(world$region))
sort(unique(plot_data$country))
plot_data <- plot_data %>% #old = new
  mutate(country = 
           recode(country, 
                  "United Kingdom" = "UK", 
                  "United States" = "USA",
                  "Congo, Dem. Rep." = "Democratic Republic of the Congo",
                  "Cote d'Ivoire" = "Ivory Coast",
                  "Congo, Rep." = "Republic of Congo")) |> 
  ungroup()
map_data <- left_join(world, plot_data, by = c("region" = "country")) |> 
  filter(region != "Antarctica")
map_data$label = "Doctors in an ageing population"
  

# subtitle
st <- "This map show the number of doctors per thousand people, rescaled by the percentage of the population aged over 70, revealing which countries* may be more likely to struggle in providing care for an elderly population.\n\n* using most recent available data for each country." 

# plot
ggplot(data = map_data,
       mapping = aes(long,
                     lat,
                     map_id = region,
                     fill = log10(ratio))) +
  geom_map(map = map_data,
           color = "#EADEDA",
           size = 0.05) +
  scale_y_continuous(limits = c(-60, 120)) +
  scale_fill_gradientn(colours = met.brewer("Hokusai2", n = 20),
                       limits = c(-1.8, 0.7),
                       breaks = c(-1.6, 0.5),
                       labels = c("Fewer doctors", "More doctors")
                       ) +
  facet_wrap(~label) +
  labs(tag = usefunc::str_wrap_break(st, 120),
       caption = "N. Rennie | Data: Gapminder") +
  guides(fill = guide_colourbar(ticks = FALSE)) +
  theme_void() +
  theme(plot.background = element_rect(fill = "#EADEDA", colour = "#EADEDA"),
        panel.background = element_rect(fill = "#EADEDA", colour = "#EADEDA"),
        strip.text = element_text(family = "slab", lineheight = 0.4, hjust = 0,
                                  colour = "#EADEDA", size = 48,
                                  margin = margin(t = 10, 
                                                  l = 10, 
                                                  b = 10)),
        strip.background = element_rect(fill = "#1B5681", colour = "#1B5681"),
        plot.tag.position = c(0.03, 0.78),
        plot.tag = element_text(family = "roboto",lineheight = 0.4, size = 24,
                                colour = "#0E3F62", hjust = 0),
        plot.caption = element_text(family = "roboto", lineheight = 0.4,
                                    size = 24, hjust = 0.03,
                                    colour = "#0E3F62"),
        legend.text = element_text(family = "roboto", lineheight = 0.4,
                                   size = 24, hjust = 0.5,
                                   colour = "#0E3F62"),
        legend.key.width = unit(2,"cm"),
        legend.key.height = unit(0.3,"cm"),
        legend.position = c(0.645, -0.005),
        legend.title = element_blank(),
        legend.direction = "horizontal",
        plot.margin = margin(0,0,10,0))

```


- Karamanis con datos de Eurostat: <https://twitter.com/geokaramanis/status/1611052804109635584>

