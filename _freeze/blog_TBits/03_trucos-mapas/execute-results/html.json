{
  "hash": "ac3071f31f98d8e67b56ed1a53923de0",
  "result": {
    "markdown": "---\ntitle: \"Maps (trucos)\"\nsubtitle: | \n  Recopilación de truquillos sobre GIS\ndate: 2023-07-11\n#draft: true\ncategories: [maps, GIS]\n---\n\n\n\n\nEste post sirve para apuntar trucos sobre {GIS}\n\n\n\n## Datos\n\n- Mundo\n\n\n::: {.cell hash='03_trucos-mapas_cache/html/unnamed-chunk-1_2cb607c5dbc7ac7e2e13d56943ed2cca'}\n\n```{.r .cell-code}\nworld <- ggplot2::map_data(\"world\")\n```\n:::\n\n\n- Eurostat\n\n\n::: {.cell hash='03_trucos-mapas_cache/html/unnamed-chunk-2_698a287d700a13da52e85bb3af047ac1'}\n\n```{.r .cell-code}\nlibrary(eurostat)\ngreece <- eurostat_geodata_60_2016 %>% \n    filter(LEVL_CODE == 3, stringr::str_sub(geo, 1, 2) == \"EL\")\n\n#- https://twitter.com/geokaramanis/status/1611052804109635584\nnuts2 <- eurostat_geodata_60_2016 %>% janitor::clean_names() %>% \n  filter(levl_code == 2)\n\n# Get world coastline, to be used as \"background\"\nworld_coast <- sf::read_sf(\"https://gisco-services.ec.europa.eu/distribution/v2/coas/geojson/COAS_RG_10M_2016_3035.geojson\")\n\n#- para el zoom (incluye Canarias y Turquía)\ncoord_sf(xlim = c(-22.5, 44), ylim = c(30, 70.5)) +\n```\n:::\n\n\n\n<br>\n\n\n## Trucos\n\n### Ilya Katalinsky\n\n\nDice que mejora mucho las coropleta si quitamos los bordes exteriores de las geometrías: <https://ikashnitsky.github.io/2023/map-borders/index.html>. Geometrías de Eurostat (NUTS-3)\n\n\n\n::: {.cell hash='03_trucos-mapas_cache/html/unnamed-chunk-3_e6c61c3b54d25ae46f03eec80f30ffc5'}\n\n```{.r .cell-code}\n#- esto crea un objeto con las innerlines de unas geometrias\n\nlibrary(rmapshaper)\nbord <- greece %>% ms_innerlines()\n```\n:::\n\n::: {.cell hash='03_trucos-mapas_cache/html/unnamed-chunk-4_0691d1c817365aff95a3b63cb975b71f'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(cowplot)\n\nset.seed(911)\n\n# subset Greence, NUTS-3 regions\nlibrary(eurostat)\ngreece <- eurostat_geodata_60_2016 %>% \n    filter(LEVL_CODE == 3,\n           str_sub(geo, 1, 2) == \"EL\") %>% \n    # create random values for filling the polygons\n    mutate(random = runif(length(id))) %>% \n    select(id, geometry, random) %>% \n    st_transform(crs = 3035)\n\n# plot with polygon outlines\ngreece %>% \n    ggplot()+\n    geom_sf(aes(fill = random), color = 2, size = 1)+\n    labs(title = \"Polygons outlined\")+\n    scale_fill_viridis_c(begin = .5)+\n    theme_map()+\n    theme(plot.background = element_rect(color = NA, fill = \"#eeffff\"))\n\ngg_outline <- last_plot()\n\n#- AQUI: el truco es crear las innerlines y meterlo en otro geom\n# produce border lines with rmapshaper::ms_innerlines()\nlibrary(rmapshaper)\nbord <- greece %>% ms_innerlines()\n\n# now plot without polygon outlines and with borders as lines\ngreece %>% \n    ggplot()+\n    geom_sf(aes(fill = random), color = NA) +\n    geom_sf(data = bord, color = 2, size = 1) +\n    labs(title = \"Borders as lines\") +\n    scale_fill_viridis_c(begin = .5) +\n    theme_map()+\n    theme(plot.background = element_rect(color = NA, fill = \"#eeffff\"))\n\n# put side by side\nlibrary(patchwork)\n(\n    gg_outline + gg_bord \n)  + \n    plot_layout(guides = \"collect\")+\n    plot_annotation(\n        caption = \"! Look at the islands\", \n        theme = theme(plot.background = element_rect(color = NA, fill = \"#eeffff\"))\n    )\ngg_bord <- last_plot()\n```\n:::\n\n\n<br>\n\n## Ejemplos\n\nNuevo proyecto/concurso (**MapPromptMonday**): <https://github.com/MapPromptMonday/MapPromptMonday>\n### Chulisima coropleta\n\n<https://twitter.com/nrennie35/status/1610198066547814401>\n\n\n\n::: {.cell hash='03_trucos-mapas_cache/html/unnamed-chunk-5_cee9336294a67499d644b139315e5393'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(MetBrewer)\n\n# load fonts\nfont_add_google(\"Roboto Slab\", \"slab\")\nfont_add_google(\"Roboto\", \"roboto\")\nshowtext_auto()\n\n# load data (no chuta)\npop <- readr::read_csv(\"2023/2023-01-03/data/population_aged_70plus_years_both_sexes_percent.csv\")\ndoctors <- readr::read_csv(\"2023/2023-01-03/data/medical_doctors_per_1000_people.csv\")\n\n# data wrangling\npop <- pop |> \n  pivot_longer(-country, values_to = \"pop\", names_to = \"year\")\ndoctors <- doctors |> \n  pivot_longer(-country, values_to = \"doctors\", names_to = \"year\")\nplot_data <- pop |> \n  full_join(doctors, by = c(\"country\", \"year\")) |> \n  mutate(ratio = doctors/pop) |> \n  drop_na() |> \n  group_by(country) |> \n  slice_max(year)\n\n# world map\nworld <- map_data(\"world\")\nsort(unique(world$region))\nsort(unique(plot_data$country))\nplot_data <- plot_data %>% #old = new\n  mutate(country = \n           recode(country, \n                  \"United Kingdom\" = \"UK\", \n                  \"United States\" = \"USA\",\n                  \"Congo, Dem. Rep.\" = \"Democratic Republic of the Congo\",\n                  \"Cote d'Ivoire\" = \"Ivory Coast\",\n                  \"Congo, Rep.\" = \"Republic of Congo\")) |> \n  ungroup()\nmap_data <- left_join(world, plot_data, by = c(\"region\" = \"country\")) |> \n  filter(region != \"Antarctica\")\nmap_data$label = \"Doctors in an ageing population\"\n  \n\n# subtitle\nst <- \"This map show the number of doctors per thousand people, rescaled by the percentage of the population aged over 70, revealing which countries* may be more likely to struggle in providing care for an elderly population.\\n\\n* using most recent available data for each country.\" \n\n# plot\nggplot(data = map_data,\n       mapping = aes(long,\n                     lat,\n                     map_id = region,\n                     fill = log10(ratio))) +\n  geom_map(map = map_data,\n           color = \"#EADEDA\",\n           size = 0.05) +\n  scale_y_continuous(limits = c(-60, 120)) +\n  scale_fill_gradientn(colours = met.brewer(\"Hokusai2\", n = 20),\n                       limits = c(-1.8, 0.7),\n                       breaks = c(-1.6, 0.5),\n                       labels = c(\"Fewer doctors\", \"More doctors\")\n                       ) +\n  facet_wrap(~label) +\n  labs(tag = usefunc::str_wrap_break(st, 120),\n       caption = \"N. Rennie | Data: Gapminder\") +\n  guides(fill = guide_colourbar(ticks = FALSE)) +\n  theme_void() +\n  theme(plot.background = element_rect(fill = \"#EADEDA\", colour = \"#EADEDA\"),\n        panel.background = element_rect(fill = \"#EADEDA\", colour = \"#EADEDA\"),\n        strip.text = element_text(family = \"slab\", lineheight = 0.4, hjust = 0,\n                                  colour = \"#EADEDA\", size = 48,\n                                  margin = margin(t = 10, \n                                                  l = 10, \n                                                  b = 10)),\n        strip.background = element_rect(fill = \"#1B5681\", colour = \"#1B5681\"),\n        plot.tag.position = c(0.03, 0.78),\n        plot.tag = element_text(family = \"roboto\",lineheight = 0.4, size = 24,\n                                colour = \"#0E3F62\", hjust = 0),\n        plot.caption = element_text(family = \"roboto\", lineheight = 0.4,\n                                    size = 24, hjust = 0.03,\n                                    colour = \"#0E3F62\"),\n        legend.text = element_text(family = \"roboto\", lineheight = 0.4,\n                                   size = 24, hjust = 0.5,\n                                   colour = \"#0E3F62\"),\n        legend.key.width = unit(2,\"cm\"),\n        legend.key.height = unit(0.3,\"cm\"),\n        legend.position = c(0.645, -0.005),\n        legend.title = element_blank(),\n        legend.direction = \"horizontal\",\n        plot.margin = margin(0,0,10,0))\n```\n:::\n\n\n\n- Karamanis con datos de Eurostat: <https://twitter.com/geokaramanis/status/1611052804109635584>\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}