{
  "hash": "ffa48c8ead5f9bdd43a1457e87bd80ce",
  "result": {
    "markdown": "---\ntitle: \"Entendiendo cosillas de ggplot2\"\nsubtitle: | \n   A ver si refresco/aprendo cosas de ggplot2\ndate: 2023-07-10\n#draft: true\ncategories: [ggplot2, trucos, geoms]\n---\n\n\n## 1. Text size & resolution\n\nHace poco retome el blog y tuve que trastear un poco para presentar unos plots más o menos decentes, asi que cuando de casualidad he visto [este post](https://www.christophenicault.com/post/understand_size_dimension_ggplot2/) me he dicho que tenía que volver a leerlo, y aquí estoy.\n\n- Recuerda los [consejos de Hadley](https://perezp44.github.io/intro.to.quarto/blog/24_imagenes.html#tama%C3%B1o-de-las-im%C3%A1genes)\n\n- Recuerda tb como ajustaste el tamaño en el tercer post sobre censos históricos (con div's)\n\n### Ideas\n\n- A screen is basically a matrix of pixels^[Un pixel es the smallest element that can be displayed]\n\n- Mi pantalla tiene una resolución de 1920 (ancho) x 1080 (alto) pixeles; 96 pixels per inch. Puedes obtenre estos datos con `xdpyinfo | grep -B 2 resolution`\n\n- Una imagen (guardada en disco) es una matriz de puntos\n\n- ggplot and ggsave works in physical dimension (in, cm, or mm). To go from the dimension in inches to a number of dots, ggsave uses the number of dots per inches (dpi).\n\n- So if we create a plot in ggplot and save it with a dimension of 12 x 10 with the default dpi of 300 for ggsave, the file will be a matrix of (12 * 300) x (10 * 300) = 3600 x 3000 dots.\n\n- Now if you open that file on your computer, each dots represent a pixel, which means that the image has a resolution of 3600 x 3000 px.\n\n- The relation is : (size in inches) = (screen size in pixel) / PPI or (screen size in pixel) = DPI * (size in inches)\n\n\n\n::: {.cell hash='01_trucos-ggplot2_cache/html/unnamed-chunk-1_e472628a24a9d66356005e1ca290f119'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\ntheme_set(theme_bw())\n```\n:::\n\n\nThen open a new graphic device with x11() (or quartz(), or windows() depending on your system) with a dimension of 1920 x 1200.\n\n\n::: {.cell hash='01_trucos-ggplot2_cache/html/unnamed-chunk-2_cb15179c3a12158c93c0ec8d93f642e6'}\n\n```{.r .cell-code}\nx11()\n```\n:::\n\n::: {.cell hash='01_trucos-ggplot2_cache/html/unnamed-chunk-3_8b23a50a6ee400ceb6b10d38da60527b'}\n\n```{.r .cell-code}\nplt <- penguins %>%\n  ggplot(aes(bill_length_mm, bill_depth_mm, color = species)) +\n  geom_point()\n\nggsave(\"test.png\", plot = plt, dpi = 300)\n\ndev.off()\n```\n:::\n\n\n\n\n## 2. Palettes\n\n- Toot de Andrew Heiss [aquí](https://fediscience.org/@andrew/110695840410830751)\n\n\n\n## 3. Geoms\n\n\n### geom_image()\n\n\n\n\n::: {.cell hash='01_trucos-ggplot2_cache/html/unnamed-chunk-4_ec608d10ac44950a29fb862429d3e297'}\n\n```{.r .cell-code}\nlibrary(cropcircles)\nlibrary(dplyr)\nlibrary(ggimage)\n\n# breaking bad images\nx <- c(1, 3, 9, 8)\nimages <- glue::glue(\"https://openpsychometrics.org/tests/characters/test-resources/pics/BB/{x}.jpg\")\n\ndf <- tibble(y = 1:4, images = images) |> \n  mutate(images_circle = circle_crop(images))\n\ndf |> \n  ggplot() +\n  geom_image(aes(1.5, y, image = images), size = 0.15) +\n  geom_image(aes(3.5, y, image = images_circle), size = 0.15) +\n  xlim(0, 5) +\n  ylim(0, 5) +\n  coord_fixed()\n```\n\n::: {.cell-output-display}\n![](01_trucos-ggplot2_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n## 4. Trucos\n\n### Fuentes\n\n\n\n::: {.cell hash='01_trucos-ggplot2_cache/html/unnamed-chunk-5_267cf1c66d1831af3bdc215e74f17f2e'}\n\n```{.r .cell-code}\nlibrary(showtext)\n# Import fonts ----\nfont_add_google(name = \"Roboto Slab\", family = \"roboto slab\")\nfont_add_google(\"Permanent Marker\")\nmain_font <- \"Permanent Marker\"\nshowtext_auto() \n```\n:::\n\n\n\n### Guardar gráficos\n\n\n::: {.cell hash='01_trucos-ggplot2_cache/html/unnamed-chunk-6_9874d7805d728ac54ed0f63c1bfe5232'}\n\n```{.r .cell-code}\nggsave(\"2023_01_worldcups.png\", p, dpi = 320, width = 12, height = 6)\n\nggsave(\"2023-01-03.png\", height = 1600, width= 1000, units = \"px\")\n```\n:::\n\n\n<br>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}