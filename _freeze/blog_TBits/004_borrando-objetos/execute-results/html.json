{
  "hash": "265a3d919f15811afe7f5b6ed89e1034",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Borrando objetos del Global\"\nsubtitle: | \n   Hay que saber tener el Clobal medio limpio\ndate: 2024-03-07\n#draft: true\ncategories: [funciones]\nimage: \"imagenes/thumbnail_borrar-archivos.png\"\ncode-fold: false\nexecute:\n  eval: false\n---\n\n\n## Intro\n\nYa sabemos que en R, los objetos que se van creando al hacer un análisis se guardan en el **Global Environment**^[Cuando cerremos la sesión de R los objetos desaparecerán, la memoria quedará vacía], por lo que si creamos muchos objetos intermedios y/o trabajamos con objetos muy grandes, podemos llegar a tener problemas de memoria; así que hay que aprender a borrar los objetos que ya no necesitamos y tener el Global medio limpio. Vamos a ello\n\n\n\n## Borrando objetos con `base::rm()`\n\nPodemos hacerlo de varias maneras, siempre usando la función `rm()`:\n\n\n### Borrando objetos de \"uno en uno\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#- creamos 4 objetos\naa <- 1:10 ; bb <- 40:45; cc <- 100:105; dd <- 200:205\n\nrm(aa)   #- borramos el objeto aa\nrm(\"cc\") #- borramos el objeto cc. \n```\n:::\n\n\n\n\nFíjate bien que `base::rm()` admite que pongas el nombre del objeto que quieres borrar, por ejemplo `aa`, pero también puedes poner el nombre del objeto entre comillas como carácter (`\"aa\"`). Utilizando jerga R, puedes poner el name o el quoted name.\n\n\nQuiero volver a insistir en este punto, así que si miras la ayuda de la función `base::rm()` verás que para su primer argumento indica:\n\n\n> the objects to be removed, as names (unquoted) or character strings (quoted)\n\n<br>\n\n### Borrando varios objetos a la vez\n\nSi queremos borrar varios objetos a la vez, podemos hacerlo pasándole varios nombres de objetos al primer argumento de la función `...` de `base::rm()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#- creamos 4 objetos\naa <- 1:10 ; bb <- 40:45; cc <- 100:105; dd <- 200:205\n\nrm(aa, bb)     #- borramos los objetos aa y bb\nrm(cc, \"dd\")   #- borramos los objetos cc y dd\n```\n:::\n\n\n### Borrando objetos, pero usando el segundo argumento de `base::rm()`\n\nVamos a borrar objetos, **PERO** en lugar de pasar los nombres de los objetos al primer argumento de la función `...`, los pasaremos al segundo argumento de la función `list`. \n\nImportante: A este segundo argumento de la función hay que pasarle los nombres de los objetos a eliminar como un vector de caracteres; es decir, como \"quoted names\".\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#- creamos 4 objetos\naa <- 1:10 ; bb <- 40:45; cc <- 100:105; dd <- 200:205\n\nrm(list = \"aa\")     #- borramos el objeto aa. Necesariamente ha de ser quoted\n\nrm(list = c(\"bb\", \"cc\"))   #- podemos pasarle un vector de quoted names\n```\n:::\n\n\n\nPodemos pasar al argumento `list` un vector de quoted names. Por ejemplo:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naa <- 1:10 ; bb <- 40:45; cc <- 100:105; dd <- 200:205\n\nmy_objetos_to_borrar <- c( \"bb\", \"dd\")\nrm(list = my_objetos_to_borrar)   #- podemos pasarle un vector de quoted names\n```\n:::\n\n\nFíjate que el objeto `my_objetos_to_borrar` no se ha borrado.\n\n<br>\n\n#### Borrando todos los objetos del Global Environment\n\nEn el siguiente chunk **borraremos todos los objetos** del Global Environment. Para ello usamos la función `base::ls()` :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naa <- 1:10 ; bb <- 40:45; cc <- 100:105; dd <- 200:205\nrm(list = ls())\n```\n:::\n\n\n\nPara entenderlo ejecuta `base::ls()` y verás que devuelve un vector con los nombres (quoted) de todos los objetos que haya en el Global\n\n<br>\n\n\n## Otras estrategias de borrado\n\n### Borrar todo excepto ...\n\n\nVolvemos a crear 4 objetos y borraremos todos excepto el objeto `aa`. Para ello utilizamos la función `base::setdiff()` que devuelve los elementos de un vector que no están en otro vector.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#- creamos 4 objetos\naa <- 1:10 ; bb <- 40:45; cc <- 100:105; dd <- 200:205\n\n#- borramos todos los objetos excepto aa\n#- Necesariamente tenemos que usar  \"aa\" entre comillas; es decir el quoted name, porque usamos el segundo argumento list\nrm(list = setdiff(ls(), \"aa\"))   #- borra todos los objetos en el Global, excepto aa\n```\n:::\n\n\n\n#### Explicaciones\n\nEn el anterior chunk, estamos usando 3 funciones (del paquete base); de hecho podríamos ser más explícitos y escribir el chunk como:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::rm(list = base::setdiff(base::ls(), \"aa\"))   \n```\n:::\n\n\n\n- `base::ls()` devuelve un vector con los nombres de los objetos en el Global Environment como character (es decir, quoted)\n\n- `base::setdiff(x, y)`: coge 2 vectores, x e y, para devolver los elementos de x que no están en y\n\n- `base::rm()`: borra los objetos que le pasemos como argumento.  Si le pasamos `list = ls()` borra todos los objetos en el Global Environment.\n\nPara entenderlo del todo vamos a ejecutar las funciones por separado:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#- creamos 4 objetos\naa <- 1:10 ; bb <- 40:45; cc <- 100:105; dd <- 200:205\n\nls()   #- devuelve los nombres de los objetos en el Global Environment (quoted)\n\nsetdiff(ls(), \"aa\")  #- devuelve los nombres de los objetos en el Global Environment que no son \"aa\"\n\nrm(list = setdiff(ls(), \"aa\"))   #- borra todos los objetos en el Global, excepto aa\nrm(setdiff(ls(), \"aa\"))   #- borra todos los objetos en el Global, excepto aa\n```\n:::\n\n\n<br>\n\n### Estrategia alternativa: elijiendo qué no borrar\n\n\n::: {.cell}\n\n```{.r .cell-code}\naa <- 1:10 ; bb <- 40:45; cc <- 100:105; dd <- 200:205\n\nobjetos_no_borrar <- c(\"aa\", \"bb\")\nrm(list = ls()[!ls() %in% objetos_no_borrar])\n```\n:::\n\n\nEntender la expresión es un poco más complicado, pero tampoco tanto. Para entenderla es mejor ejecutar la expresión por partes.\n\n<br>\n\n## Borrar los que empiezan por un patrón\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\naa <- 1:10 ; bb <- 40:45; tmp_1 <- 100:105; tmp_2 <- 200:205\n\nrm(list = ls()[grep(\"^tmp\", ls())])\n\nrm(list = ls()[grep(\"tm\", ls())])\n\nrm(list = ls(pattern = \"^tmp\"))\n\nrm(list = grep(\"^tmp\", ls(), value = TRUE, invert = TRUE))\n\nrm(list = apropos(\"mp\"))\n```\n:::\n\n\n\n<br>\n\n## Conclusion\n\n\nEs bueno mantener el Global Environment limpio. Si estamos trabajando en un proyecto, es mejor borrar los objetos que ya no necesitamos. Para ello podemos usar la función `base::rm()`.\n\nLa función `base::rm()` permite borrar todos los objetos en el Global, con `rm(list = ls())`, o borrar solo algunos objetos; por ejemplo `rm(aa, \"bb\")`.\n\nTambién podemos utilizar patrones más complejos para borrar solo algunos objetos. Por ejemplo, podemos borrar los objetos que empiezan por un patrón, o borrar todos los objetos excepto algunos que nos interesa mantener.\n\nNo te lo recomiendo ahora mismo, pero si tienes ganas de profundizar en el tema, te recomiendo que leas [este hilo](https://community.rstudio.com/t/first-line-of-every-r-script/799?u=jessemaegan) de la comunidad de RStudio. Aparecen ideas sobre los conceptos de clean environment y reproducibilidad. En el hilo también aparece Hadley dando su opinión sobre el tema, concretamente [aquí](https://community.rstudio.com/t/first-line-of-every-r-script/799/36).\n\n  \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}