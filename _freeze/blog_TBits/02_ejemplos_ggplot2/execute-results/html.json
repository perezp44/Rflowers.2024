{
  "hash": "d1beafb7a72b279d0e82e2df92ca1a2f",
  "result": {
    "markdown": "---\ntitle: \"Ejemplos de ggplot's\"\nsubtitle: | \n   Recopilación de ejemplos sobre ggplot2\ndate: 2023-07-11\n#draft: true\ncategories: [ggplot2, ejemplos]\n---\n\n\n\nEste post sirve para apuntar ejemplos sobre {ggplot2}\n\n\n-------------------\n\n<br>\n\n\n## Ejemplos\n\n\n\n### Lineas\n\n#### Futbol\n\nEs un ejemplo de tidytuesday que usa datos de fútbol. Hace un gráfico temporal pero con rectángulos hace como el césped de la cancha. Es sencillo y **se puede usar de ejemplo en clase**: <https://twitter.com/KittJonathan/status/1610209812863909890>\n\n\n\n\n\n::: {.cell hash='02_ejemplos_ggplot2_cache/html/unnamed-chunk-1_26b75edd1869c20fd7c5abe74634a133'}\n\n```{.r .cell-code}\n# TidyTuesday challenge\n# Year : 2023\n# Week : 1\n# Bring your own data : FIFA World Cups\n# https://github.com/rfordatascience/tidytuesday/tree/master/data/2022/2022-11-29\n\n# Load packages ----\n\nlibrary(showtext)\n\nlibrary(tidyverse)\n\n# Import fonts ----\n\nfont_add_google(name = \"Roboto Slab\", family = \"roboto slab\")\nshowtext_auto()\n\n# Import dataset ----\n\nworldcups <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-29/worldcups.csv')\n\n# Data wrangling ----\n\nworldcups <- worldcups |> \n  # add row with data for 2022 WC\n  dplyr::add_row(year = 2022, host = \"Qatar\",\n                 winner = \"Argentina\", second = \"France\", third = \"Croatia\", fourth = \"Morocco\",\n                 goals_scored = 172, teams = 32, games = 64, attendance = 3404052) |> \n  # calculate number of goals per game\n  dplyr::mutate(goals_per_game = round(goals_scored / games, 2)) |> \n  # add background strips limits and colours\n  dplyr::mutate(strip_start = 0:21, .before = year) |> \n  dplyr::mutate(strip_end = 1:22, .before = year) |> \n  dplyr::mutate(strip_col = rep(c(\"#6cb239\", \"#87ca5c\"), times = 11), .before = year) |> \n  # add xpos column\n  dplyr::mutate(xpos = c(0.5:21.5), .before = year)\n\n\n# Create plot ----\np\np <- ggplot() +\n  #- truco (como hacer rectangulos) ---------------------\n  geom_rect(data = worldcups,\n            aes(xmin = strip_start, xmax = strip_end,\n                ymin = 0, ymax = 6),\n            fill = worldcups$strip_col) +\n  geom_segment(data = worldcups,\n               aes(x = 0, xend = 22, y = mean(goals_per_game), yend = mean(goals_per_game)),\n               col = \"darkgreen\", linetype = \"dashed\", size = 1) +\n  geom_line(data = worldcups,\n            aes(x = xpos, y = goals_per_game),\n            col = \"white\", linewidth = 3) +\n  geom_text(data = filter(worldcups, goals_per_game == max(goals_per_game)),\n            aes(x = xpos, y = goals_per_game + 0.25, label = goals_per_game),\n            size = 20, family = \"roboto slab\", col = \"darkgreen\") +\n  geom_text(data = filter(worldcups, goals_per_game == min(goals_per_game)),\n            aes(x = xpos, y = goals_per_game - 0.25, label = goals_per_game),\n            size = 20, family = \"roboto slab\", col = \"darkgreen\") +\n  geom_text(data = worldcups,\n            aes(x = 0.5, y = mean(goals_per_game) - 0.15,\n                label = paste0(\"Overall average : \", round(mean(goals_per_game), 2))),\n            size = 20, family = \"roboto slab\", col = \"darkgreen\", hjust = 0) +\n  geom_text(data = worldcups,\n            aes(x = xpos, y = 0.5, label = year),\n            family = \"roboto slab\", size = 15, col = \"darkgreen\") +\n  geom_text(data = worldcups,\n            aes(x = 15, y = 5, label = \"FIFA world cups\"),\n            family = \"roboto slab\", size = 50, col = \"darkgreen\") +\n  geom_text(data = worldcups,\n            aes(x = 15, y = 4.5, label = \"Goals per game\"),\n            family = \"roboto slab\", size = 35, col = \"darkgreen\") +\n  geom_text(data = worldcups,\n            aes(x = 21.75, y = 0.1, label = \"J. Kitt | Data : Kaggle\"),\n            family = \"roboto slab\", hjust = 1, size = 10, col = \"darkgreen\") +\n  theme_void()\n\np\n# Save plot ----\n#ggsave(\"2023_01_worldcups.png\", p, dpi = 320, width = 12, height = 6)\n```\n:::\n\n\n<br>\n\n### Barras\n\nSencillo pero usa tipo de letra,  pone nombre y texto dentro de las barras y usa colores y theme. Puede ser **ejemplo de clase**: <https://twitter.com/_jcken/status/1610176700624650243>\n\n\n::: {.cell hash='02_ejemplos_ggplot2_cache/html/unnamed-chunk-2_c0ae5b713afdb43b80322146d952c647'}\n\n```{.r .cell-code}\n#- https://twitter.com/_jcken/status/1610176700624650243\n#- el repo: https://github.com/jcken95/tidytuesday\n\nmy_url <- \"https://raw.githubusercontent.com/jcken95/tidytuesday/main/2023/2023-01-03/thesis.csv\"\n\n# packages ----\n\nlibrary(tidyverse)\nlibrary(tidytext)\nlibrary(SemNetCleaner)\nlibrary(showtext)\n# data ----\n\nthesis <- readr::read_csv(my_url)\n\n# fonts + clrs ----\n#- truco cambiar fuente ----------------------\n\nshowtext_auto()\nfont_add_google(\"Permanent Marker\")\nmain_font <- \"Permanent Marker\"\n\n# clrs lifted from vapoRwave\n#devtools::install_github(\"moldach/vapoRwave\")\n\n#- truco mostrar escalas ----------------------\n#scales::show_col(vapoRwave:::newRetro_palette)\n\nbg <- \"#4A354F\"\ntxt <- \"#FF4373\"\nbars <- \"#9239F6\"\n# wranging ----\n\nthesis <- thesis %>%\n  anti_join(stop_words, by = \"word\") %>%  # remove stop words\n  filter(is.na(as.numeric(word))) %>% # remove numbers\n  filter( !(word %in% c(\"table\", \"equation\", \"align\", \"chapter\"))) %>%  # filter out some common latex environments\n  group_by(word) %>%\n  mutate(word = singularize(word[1])) %>%\n  mutate(n_word = length(word)) %>%\n  ungroup() \n\ntop_ten_words <- thesis %>%\n  select(word, n_word) %>%\n  distinct() %>% \n  arrange(-n_word) %>%\n  slice(1:10) %>%\n  mutate(rank = 1:10)\n\n# plot(s) ----\n\ntop_ten_words %>%\n  ggplot() +\n  #- aquí truco para reordenar un factor\n  geom_col(aes(y = reorder(word, rank), x = n_word),\n           colour = bars, fill = bars, width = 0.5) +\n  geom_text(\n    mapping = aes(x = 5, y = word, label = toupper(word)),\n    hjust = 0,\n    nudge_x = 0.25,\n    color = txt,\n    size = 8,\n    family = main_font\n  ) +\n  geom_text(\n    mapping = aes(x = n_word, y = reorder(word, rank), label = n_word),\n    hjust = 1,\n    nudge_x = -5,\n    color = txt,\n    size = 8,\n    family = main_font\n  ) +\n  annotate(\"text\", x = 75, y = 7.6,\n           label = \"abbreviation of Gaussian Process\",\n           family = main_font,\n           colour = txt,\n           size = 5\n  ) +\n  scale_y_discrete(breaks = NULL) +\n  labs(title = \"Thesis Wrapped\",\n       subtitle = \"Top ten most used words (adjusting for plurals) in my PhD thesis\",\n       caption = \"#TidyTuesday 03/01/2023 | Data: bring your own! | @_jcken\") +\n  xlab(\"Word Count\") +\n  ylab(\"\") +\n  theme(\n    text = element_text(family = main_font, colour = txt),\n    plot.title = element_text(hjust = 0.5, size = 36),\n    plot.subtitle = element_text(hjust = 0.5, size = 20),\n    plot.caption = element_text(hjust = 0.5, size = 16),\n    panel.grid = element_blank(),\n    plot.background = element_rect(fill = bg),\n    panel.background = element_rect(fill = bg, colour = bg),\n    axis.title.x = element_text(size = 18),\n    axis.text.x = element_text(family = main_font, colour = txt, size = 16),\n    axis.ticks = element_line(colour = txt)\n  )\n\n# save ----\n#ggsave(\"2023-01-03.png\", height = 1600, width= 1000, units = \"px\")\n```\n:::\n\n\n<br>\n\n### Infografías\n\n\n- Tanya Shapiro: evolución de Netflix, tiene imágenes etc...: <https://fosstodon.org/@tanya_shapiro/109631504740389462>\n\n- <https://github.com/tashapiro/TidyTuesday/blob/master/2022/W19/nyt_authors.png>\n\n<br>\n\n\n### Lolipop (cambios)\n\n- <https://fosstodon.org/@karat@mstdn.science/109626640570031863>   <https://github.com/tashapiro/TidyTuesday>\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}