{
  "hash": "444105fefc2c263113c211aef0f0af00",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Imágenes con stabilityAI\"\nsubtitle: | \n   Aprendiendo cómo generar imágenes con R y stabilityAI. Este es uno de los ejercicios que hicimos en clase y creo que les gustó a los estudiantes.\ndate: 2024-03-01\n#draft: true\ncategories: [IA, stabilityAI, imágenes]\nimage: \"imagenes/thumbnail_mulo.png\"\ncode-line-numbers: false\n---\n\n\nVamos a usar el paquete [stabilityAI](https://github.com/schochastics/stabilityAI) de David Schoch para conectarnos a la API de [stability.ai](https://stability.ai/) para generar imágenes partiendo de prompts textuales.\n\nEste es uno de los ejercicios que hicimos en clase y creo que les gustó a los estudiantes.\n\n<br>\n\n## Conectando R con la API de stability.ai\n\nPara conectarnos a la API de `stability.ai` hemos de seguir los siguientes pasos:\n\n1) Instalar el paquete\n\n    ```r\n    remotes::install_github(\"schochastics/stabilityAI\")\n    ```\n\n2) Generar una API key en [stability.ai](https://stability.ai/). Para ello hay que ir [aquí](https://platform.stability.ai/). donde nos logearemos con nuestra cuenta de Google para después generar una API key. \n\n    La APi key tendrá una pinta como esta: `xx-sbbbbbsbsbbsbbsbsbbsbsbbsbsbsbbsbsbsbbsbsbsbsbU`. Guárdala porque tendrás copiarla en el fichero `.Renviron`\n\n3) Una vez tengas la API-key has de copiarla en el fichero `.Renviron`. Para ello ejecuta en R:\n\n    ```r\n    usethis::edit_r_environ()\n    ```\n\n    Se abrirá el fichero `.Renviron` en RStudio o en el editor de texto que tengas configurado. Has de añadir a ese fichero la siguiente linea:\n\n    ```r\n    STABILITYAI_API_KEY=\"xx-sbbbbbsbsbbsbbsbsbbsbsbbsbsbsbbsbsbsbbsbsbsbsbU\"\n    ```\n\n    Ya hemos terminado el proceso de configuración. Ya podemos generar imágenes desde R.\n\n\n    Este proceso nos da acceso a una serie de modelos. Veamoslos\n\n\n    ```r\n    stabilityAI::get_engines_list()\n    ```\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n                                   description\n1            Real-ESRGAN_x2plus upscaler model\n2        Stability-AI Stable Diffusion XL v0.9\n3        Stability-AI Stable Diffusion XL v1.0\n4           Stability-AI Stable Diffusion v1.6\n5           Stability-AI Stable Diffusion v2.1\n6 Stability-AI Stable Diffusion XL Beta v2.2.2\n```\n\n\n:::\n:::\n\n\n<br>\n\n## Generando imágenes\n\nVamos a generar alguna imagen. Para ello usé pequeñas variantes de este promtp: \n\n> El cantautor apodado Pequeño mulo toca la guitarra junto a Laura de Comando autonomo en el pub Volander. El publico aplaude a rabiar. La perrita Jucar se pasea entre el público\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_IA_img <- stabilityAI::generate_txt2img(\n  text_prompts = \"El cantautor apodado Pequeño mulo toca la guitarra junto a Laura de Comando autonomo en el pub Volander. El publico aplaude a rabiar. La perrita Jucar se pasea entre el público\",\n  #style_preset = \"pixel-art\"\n  #- https://platform.stability.ai/docs/api-reference#tag/v1generation/operation/textToImage\n)\n```\n:::\n\n\n\nLa API de StabilityAI nos devuelve la imagen pero codificada en base64. Para convertirla a un fichero de imagen podemos ejecutar el siguiente código:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstabilityAI::base64_to_img(my_IA_img ,\"./imagenes/my_IA_img_00\")\n```\n:::\n\n\nGeneré 4 imágenes modificando ligeramente el promt. Este es el resultado:\n\n\n::: {layout-nrow=2}\n![(A)](./imagenes/my_IA_img_01.png)\n\n![(B)](./imagenes/my_IA_img_07.png)\n\n![(C)](./imagenes/my_IA_img_03.png)\n\n![(D)](./imagenes/my_IA_img_04.png)\n:::\n\n\n<br>\n\n## Un poco sobre la API de stability.ai\n\n\nLa documentación de la API de `stability.ai` está [aquí](https://platform.stability.ai/docs/api-reference#tag/v1generation/operation/textToImage) pero no he jugado muvho con ella. sólo he probado a cambiar el estilo de la imagen. Por ejemplo, si queremos que la imagen tenga un estilo de pixel-art, hemos de añadir el parámetro `style_preset = \"pixel-art\"`. Los posibles estilos son: `3d-model`, `analog-film`, `anime`, `cinematic`, `comic-book`, `digital-art`, `enhance`, `fantasy-art`, `isometric`, `line-art`, `low-poly`, `modeling-compound`, `neon-punk`, `origami`, `photographic`, `pixel-art`, y `tile-texture`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_IA_img <- stabilityAI::generate_txt2img(\n  text_prompts = \"El cantautor apodado Pequeño mulo toca la guitarra junto a Laura de Comando autonomo en el pub Volander. El publico aplaude a rabiar\",\n  style_preset = \"pixel-art\"\n  #- https://platform.stability.ai/docs/api-reference#tag/v1generation/operation/textToImage\n)\n```\n:::\n\n\n![(A)](./imagenes/my_IA_img_05.png)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_IA_img <- stabilityAI::generate_txt2img(\n  text_prompts = \"El cantautor apodado Pequeño mulo toca la guitarra junto a Laura de Comando autonomo en el pub Volander. El publico aplaude a rabiar\",\n  style_preset = \"neon-punk\"\n  #- https://platform.stability.ai/docs/api-reference#tag/v1generation/operation/textToImage\n)\n```\n:::\n\n\n![(A)](./imagenes/my_IA_img_06.png)\n\n\n\n## Más cosas\n\nEvidentemente se puede acceder a los modelos  de [stability.ai](https://stability.ai/) sin usar un lenguaje de programación; por ejemplo, se puede acceder directamente desde [Dream Studio](https://beta.dreamstudio.ai/generate)^[Este link supongo que se quedará obsoleto en nada]. Dream Studio es un sitio web para generar imágenes con Stable Diffusion, uno de los modelos de stabilty.ai.\n\nSí, generar imágenes a partir texto es divertido, pero recuerda que hay multitud de repositorios de imágenes (y otros recursos) públicas, por ejemplo [The Public Domain Review](https://publicdomainreview.org/) o [Open Culture](https://www.openculture.com/). Otras como [Unsplash](https://unsplash.com/) o [Pexels](https://www.pexels.com/) permiten descargar imágenes de forma gratuita y legal.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}